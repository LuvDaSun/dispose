import { Disposable } from "./disposable";
export declare type Usable<TDisposable extends Disposable> = TDisposable | PromiseLike<TDisposable>;
export declare function using<TResult, TDisposable1 extends Disposable, TDisposable2 extends Disposable, TDisposable3 extends Disposable, TDisposable4 extends Disposable, TDisposable5 extends Disposable>(usables: [Usable<TDisposable1>, Usable<TDisposable2>, Usable<TDisposable3>, Usable<TDisposable4>, Usable<TDisposable5>], job: (disposables: [TDisposable1, TDisposable2, TDisposable3, TDisposable4, TDisposable5]) => TResult): Promise<TResult>;
export declare function using<TResult, TDisposable1 extends Disposable, TDisposable2 extends Disposable, TDisposable3 extends Disposable, TDisposable4 extends Disposable>(usables: [Usable<TDisposable1>, Usable<TDisposable2>, Usable<TDisposable3>, Usable<TDisposable4>], job: (disposables: [TDisposable1, TDisposable2, TDisposable3, TDisposable4]) => TResult): Promise<TResult>;
export declare function using<TResult, TDisposable1 extends Disposable, TDisposable2 extends Disposable, TDisposable3 extends Disposable>(usables: [Usable<TDisposable1>, Usable<TDisposable2>, Usable<TDisposable3>], job: (disposables: [TDisposable1, TDisposable2, TDisposable3]) => TResult): Promise<TResult>;
export declare function using<TResult, TDisposable1 extends Disposable, TDisposable2 extends Disposable>(usables: [Usable<TDisposable1>, Usable<TDisposable2>], job: (disposables: [TDisposable1, TDisposable2]) => TResult): Promise<TResult>;
export declare function using<TResult, TDisposable extends Disposable>(usables: [Usable<TDisposable>], job: (disposables: [TDisposable]) => TResult): Promise<TResult>;
export declare function using<TResult, TDisposable extends Disposable>(usables: Array<Usable<TDisposable>>, job: (disposables: TDisposable[]) => TResult): Promise<TResult>;
export declare function using<TResult, TDisposable extends Disposable>(usable: Usable<TDisposable>, job: (disposable: TDisposable) => TResult): Promise<TResult>;
